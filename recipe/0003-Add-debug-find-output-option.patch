From db57624c9816e8678d0f07c8c1f790d860a63927 Mon Sep 17 00:00:00 2001
From: Ray Donnelly <mingw.android@gmail.com>
Date: Sun, 24 Feb 2019 00:32:20 +0100
Subject: [PATCH 3/3] Add --debug-find-output option

Builds on https://gitlab.kitware.com/cmake/cmake/merge_requests/2313

There's also CMAKE_FIND_DEBUG_MODE in Source/cmFindPackageCommand.cxx

I do not mind changing this over to be more like that, but I do prefer
a command-line switch to using `-DCMAKE_FIND_DEBUG_MODE=ON`
---
 Help/manual/cmake.1.rst         |  3 +++
 Source/cmFindLibraryCommand.cxx | 34 ++++++++++++++++++++++++++-------
 Source/cmFindLibraryCommand.h   |  1 +
 Source/cmServerDictionary.h     |  1 +
 Source/cmServerProtocol.cxx     |  9 ++++++---
 Source/cmake.cxx                |  4 ++++
 Source/cmake.h                  |  5 +++++
 Source/cmakemain.cxx            |  1 +
 8 files changed, 48 insertions(+), 10 deletions(-)

diff --git a/Help/manual/cmake.1.rst b/Help/manual/cmake.1.rst
index f3b81ecb68..dd119a2785 100644
--- a/Help/manual/cmake.1.rst
+++ b/Help/manual/cmake.1.rst
@@ -210,6 +210,9 @@ Options
 ``--debug-output``
  Put cmake in a debug mode.
 
+``--debug-find-output``
+ Put cmake find in a debug mode.
+
  Print extra information during the cmake run like stack traces with
  message(send_error ) calls.
 
diff --git a/Source/cmFindLibraryCommand.cxx b/Source/cmFindLibraryCommand.cxx
index e38f42b935..53d184a897 100644
--- a/Source/cmFindLibraryCommand.cxx
+++ b/Source/cmFindLibraryCommand.cxx
@@ -14,9 +14,23 @@
 #include "cmState.h"
 #include "cmStateTypes.h"
 #include "cmSystemTools.h"
+#include "cmake.h"
 
 class cmExecutionStatus;
 
+static void cmFindLibrary_IssueMessage(const cmMakefile* mf,
+                                       std::string const& msg)
+{
+  if (mf->GetCMakeInstance() && mf->GetCMakeInstance()->GetDebugFindOutput())
+    mf->IssueMessage(MessageType::LOG, msg);
+}
+
+void cmFindLibraryCommand::DebugMessage(std::string const& msg)
+{
+  const cmMakefile* mf = this->GetMakefile();
+  cmFindLibrary_IssueMessage(mf, msg);
+}
+
 cmFindLibraryCommand::cmFindLibraryCommand()
 {
   this->EnvironmentPath = "LIB";
@@ -94,7 +108,7 @@ void cmFindLibraryCommand::AddArchitecturePaths(const char* suffix)
       ") removed original suffix " + o +
       " from PATH_SUFFIXES while adding architechture paths for suffix '" +
       suffix + "'";
-    cmSystemTools::Message(msg.c_str());
+    this->DebugMessage(msg);
   }
 }
 
@@ -160,7 +174,7 @@ void cmFindLibraryCommand::AddArchitecturePath(
       std::string msg = "find_library(" + this->VariableName +
         ") added replacement path " + dirX +
         " to PATH_SUFFIXES for architechture suffix '" + suffix + "'";
-      cmSystemTools::Message(msg.c_str());
+      this->DebugMessage(msg);
     }
 
     if (use_dir) {
@@ -168,7 +182,7 @@ void cmFindLibraryCommand::AddArchitecturePath(
       std::string msg = "find_library(" + this->VariableName +
         ") added replacement path " + dir +
         " to PATH_SUFFIXES for architechture suffix '" + suffix + "'";
-      cmSystemTools::Message(msg.c_str());
+      this->DebugMessage(msg);
     }
   }
 }
@@ -238,6 +252,7 @@ struct cmFindLibraryHelper
   void SetName(std::string const& name);
   bool CheckDirectory(std::string const& path);
   bool CheckDirectoryForName(std::string const& path, Name& name);
+  void DebugMessage(std::string const& msg);
 };
 
 cmFindLibraryHelper::cmFindLibraryHelper(cmMakefile* mf)
@@ -365,14 +380,14 @@ bool cmFindLibraryHelper::CheckDirectoryForName(std::string const& path,
     this->TestPath += name.Raw;
     if (cmSystemTools::FileExists(this->TestPath, true)) {
       std::string msg = "find_library found " + name.Raw + " in " + path;
-      cmSystemTools::Message(msg.c_str());
+      this->DebugMessage(msg);
       this->BestPath = cmSystemTools::CollapseFullPath(this->TestPath);
       cmSystemTools::ConvertToUnixSlashes(this->BestPath);
       return true;
     } else {
       std::string msg =
         "find_library did not find " + name.Raw + " in " + path;
-      cmSystemTools::Message(msg.c_str());
+      this->DebugMessage(msg);
     }
   }
 
@@ -398,7 +413,7 @@ bool cmFindLibraryHelper::CheckDirectoryForName(std::string const& path,
       if (!cmSystemTools::FileIsDirectory(this->TestPath)) {
         std::string msg = "find_library found " + name.Raw +
           this->SuffixRegexStr + " in " + dir;
-        cmSystemTools::Message(msg.c_str());
+        this->DebugMessage(msg);
         // This is a matching file.  Check if it is better than the
         // best name found so far.  Earlier prefixes are preferred,
         // followed by earlier suffixes.  For OpenBSD, shared library
@@ -428,13 +443,18 @@ bool cmFindLibraryHelper::CheckDirectoryForName(std::string const& path,
   if (this->BestPath.empty()) {
     std::string msg = "find_library did not find " + name.Raw +
       this->SuffixRegexStr + " in " + dir;
-    cmSystemTools::Message(msg.c_str());
+    this->DebugMessage(msg);
   }
 
   // Use the best candidate found in this directory, if any.
   return !this->BestPath.empty();
 }
 
+void cmFindLibraryHelper::DebugMessage(std::string const& msg)
+{
+  cmFindLibrary_IssueMessage(this->Makefile, msg);
+}
+
 std::string cmFindLibraryCommand::FindNormalLibrary()
 {
   if (this->NamesPerDir) {
diff --git a/Source/cmFindLibraryCommand.h b/Source/cmFindLibraryCommand.h
index fb8a7002d9..7175e4d3fd 100644
--- a/Source/cmFindLibraryCommand.h
+++ b/Source/cmFindLibraryCommand.h
@@ -50,6 +50,7 @@ private:
   std::string FindFrameworkLibrary();
   std::string FindFrameworkLibraryNamesPerDir();
   std::string FindFrameworkLibraryDirsPerName();
+  void DebugMessage(std::string const& msg);
 };
 
 #endif
diff --git a/Source/cmServerDictionary.h b/Source/cmServerDictionary.h
index 961e4b7ea8..f452c13ad4 100644
--- a/Source/cmServerDictionary.h
+++ b/Source/cmServerDictionary.h
@@ -33,6 +33,7 @@ static const std::string kCHECK_SYSTEM_VARS_KEY = "checkSystemVars";
 static const std::string kCMAKE_ROOT_DIRECTORY_KEY = "cmakeRootDirectory";
 static const std::string kCOOKIE_KEY = "cookie";
 static const std::string kDEBUG_OUTPUT_KEY = "debugOutput";
+static const std::string kDEBUG_FIND_OUTPUT_KEY = "debugFindOutput";
 static const std::string kERROR_MESSAGE_KEY = "errorMessage";
 static const std::string kEXTRA_GENERATOR_KEY = "extraGenerator";
 static const std::string kGENERATOR_KEY = "generator";
diff --git a/Source/cmServerProtocol.cxx b/Source/cmServerProtocol.cxx
index 203ee93e42..9a39d4d39a 100644
--- a/Source/cmServerProtocol.cxx
+++ b/Source/cmServerProtocol.cxx
@@ -628,6 +628,7 @@ cmServerResponse cmServerProtocol1::ProcessGlobalSettings(
   obj[kCAPABILITIES_KEY] = cm->ReportCapabilitiesJson(true);
 
   obj[kDEBUG_OUTPUT_KEY] = cm->GetDebugOutput();
+  obj[kDEBUG_FIND_OUTPUT_KEY] = cm->GetDebugFindOutput();
   obj[kTRACE_KEY] = cm->GetTrace();
   obj[kTRACE_EXPAND_KEY] = cm->GetTraceExpand();
   obj[kWARN_UNINITIALIZED_KEY] = cm->GetWarnUninitialized();
@@ -658,9 +659,9 @@ cmServerResponse cmServerProtocol1::ProcessSetGlobalSettings(
   const cmServerRequest& request)
 {
   const std::vector<std::string> boolValues = {
-    kDEBUG_OUTPUT_KEY,       kTRACE_KEY,       kTRACE_EXPAND_KEY,
-    kWARN_UNINITIALIZED_KEY, kWARN_UNUSED_KEY, kWARN_UNUSED_CLI_KEY,
-    kCHECK_SYSTEM_VARS_KEY
+    kDEBUG_OUTPUT_KEY,    kDEBUG_FIND_OUTPUT_KEY,  kTRACE_KEY,
+    kTRACE_EXPAND_KEY,    kWARN_UNINITIALIZED_KEY, kWARN_UNUSED_KEY,
+    kWARN_UNUSED_CLI_KEY, kCHECK_SYSTEM_VARS_KEY
   };
   for (std::string const& i : boolValues) {
     if (!request.Data[i].isNull() && !request.Data[i].isBool()) {
@@ -673,6 +674,8 @@ cmServerResponse cmServerProtocol1::ProcessSetGlobalSettings(
 
   setBool(request, kDEBUG_OUTPUT_KEY,
           [cm](bool e) { cm->SetDebugOutputOn(e); });
+  setBool(request, kDEBUG_FIND_OUTPUT_KEY,
+          [cm](bool e) { cm->SetDebugFindOutputOn(e); });
   setBool(request, kTRACE_KEY, [cm](bool e) { cm->SetTrace(e); });
   setBool(request, kTRACE_EXPAND_KEY, [cm](bool e) { cm->SetTraceExpand(e); });
   setBool(request, kWARN_UNINITIALIZED_KEY,
diff --git a/Source/cmake.cxx b/Source/cmake.cxx
index ab783c7da1..8afaaf70f1 100644
--- a/Source/cmake.cxx
+++ b/Source/cmake.cxx
@@ -138,6 +138,7 @@ cmake::cmake(Role role, cmState::Mode mode)
   this->WarnUnusedCli = true;
   this->CheckSystemVars = false;
   this->DebugOutput = false;
+  this->DebugFindOutput = false;
   this->DebugTryCompile = false;
   this->ClearBuildSystem = false;
   this->FileComparison = new cmFileTimeComparison;
@@ -716,6 +717,9 @@ void cmake::SetArgs(const std::vector<std::string>& args)
     } else if (arg.find("--debug-output", 0) == 0) {
       std::cout << "Running with debug output on.\n";
       this->SetDebugOutputOn(true);
+    } else if (arg.find("--debug-find-output", 0) == 0) {
+      std::cout << "Running with debug output on for the `find` commands.\n";
+      this->SetDebugFindOutputOn(true);
     } else if (arg.find("--trace-expand", 0) == 0) {
       std::cout << "Running with expanded trace output on.\n";
       this->SetTrace(true);
diff --git a/Source/cmake.h b/Source/cmake.h
index 6fa2d3a947..a4ab009d31 100644
--- a/Source/cmake.h
+++ b/Source/cmake.h
@@ -335,6 +335,10 @@ public:
   bool GetDebugOutput() { return this->DebugOutput; }
   void SetDebugOutputOn(bool b) { this->DebugOutput = b; }
 
+  // Do we want debug output from the find commands during the cmake run.
+  bool GetDebugFindOutput() { return this->DebugFindOutput; }
+  void SetDebugFindOutputOn(bool b) { this->DebugFindOutput = b; }
+
   // Do we want trace output during the cmake run.
   bool GetTrace() { return this->Trace; }
   void SetTrace(bool b) { this->Trace = b; }
@@ -489,6 +493,7 @@ private:
   ProgressCallbackType ProgressCallback;
   WorkingMode CurrentWorkingMode;
   bool DebugOutput;
+  bool DebugFindOutput;
   bool Trace;
   bool TraceExpand;
   bool WarnUninitialized;
diff --git a/Source/cmakemain.cxx b/Source/cmakemain.cxx
index 09068f8c76..c35cbacf69 100644
--- a/Source/cmakemain.cxx
+++ b/Source/cmakemain.cxx
@@ -89,6 +89,7 @@ static const char* cmDocumentationOptions[][2] = {
     "Do not delete the try_compile build tree. Only "
     "useful on one try_compile at a time." },
   { "--debug-output", "Put cmake in a debug mode." },
+  { "--debug-find-output", "Put cmake find in a debug mode." },
   { "--trace", "Put cmake in trace mode." },
   { "--trace-expand", "Put cmake in trace mode with variable expansion." },
   { "--trace-source=<file>",
-- 
2.17.2 (Apple Git-113)

