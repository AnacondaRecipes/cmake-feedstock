From d89ec85ddc6a0c2f5c5f27c661a8b30297fa2e18 Mon Sep 17 00:00:00 2001
From: Ray Donnelly <mingw.android@gmail.com>
Date: Mon, 25 Feb 2019 23:06:00 +0100
Subject: [PATCH 4/4] Default to NO_SYSTEM_ENVIRONMENT_PATH when
 CMAKE_CROSSCOMPILING

---
 Source/cmFindBase.cxx | 25 +++++++++++++++++++++++++
 1 file changed, 25 insertions(+)

diff --git a/Source/cmFindBase.cxx b/Source/cmFindBase.cxx
index fdc78ba5ea..07d9ab773a 100644
--- a/Source/cmFindBase.cxx
+++ b/Source/cmFindBase.cxx
@@ -171,6 +171,31 @@ bool cmFindBase::ParseArguments(std::vector<std::string> const& argsIn)
     this->UserGuessArgs.insert(this->UserGuessArgs.end(),
                                shortArgs.begin() + 1, shortArgs.end());
   }
+  /* We do not want build system libraries (located from being on PATH) to get found.
+     We definitely do not want this when cross-compiling.
+     Reading the docs we see:
+     Search the standard system environment variables. This can be skipped if
+     NO_SYSTEM_ENVIRONMENT_PATH is an argument.
+     Directories in INCLUDE. On Windows hosts: <prefix>/include/<arch>
+     .. this last part, directories in INCLUDE, could be problematic. Need to see if
+     we can split this. CMake really needs a cleaner separation of build and host.
+     In this instance, PATH and INCLUDE are both looked in when !NO_SYSTEM_ENVIRONMENT_PATH
+     but PATH is an aspect of the build machine, executables on PATH can be run on your computer
+     while INCLUDE may be an aspect of the host machine. */
+  if (this->Makefile->IsOn("CMAKE_CROSSCOMPILING")) {
+    if (this->DebugModeWanted()) {
+      std::string msg = "cmFindBase::ParseArguments find_*(" + args[0] +
+        "), CMAKE_CROSSCOMPILING is on so disabling NO_SYSTEM_ENVIRONMENT_PATH "
+        " by default. "
+        "Please see: https://cmake.org/cmake/help/latest/command/find_path.html";
+      cmFindCommon_IssueMessage(this->Makefile, msg);
+    }
+    // this->NoCMakePath = true;
+    // this->NoCMakeEnvironmentPath = true;
+    this->NoSystemEnvironmentPath = true;
+    // this->NoCMakeSystemPath = true;
+  }
+
   this->ExpandPaths();
 
   this->ComputeFinalPaths();
-- 
2.17.2 (Apple Git-113)

